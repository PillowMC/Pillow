buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        mavenCentral()
    }
    dependencies {
        // classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        // classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'java-library'
}
// apply plugin: 'net.minecraftforge.gradle'
// apply plugin: 'org.spongepowered.mixin'


version = "0.1-SNAPSHOT"
group = 'net.pillowmc' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'pillow'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
// minecraft {
//     mappings channel: 'official', version: '1.18.2'
//     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.
// }

java {
    withSourcesJar()
}

sourceSets {
    langprovider{
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.main.output
    }
}

repositories {
    mavenLocal()
    maven { url = 'https://lss233.littleservice.cn/repositories/minecraft' }
    maven {
        name = 'Forge Developement LLC'
        url = 'https://maven.minecraftforge.net'
    }
    maven {
        name = 'QuiltMC'
        url = 'https://maven.quiltmc.org/repository/release/'
    }
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/PillowMC/PillowMC")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    // minecraft 'net.minecraftforge:forge:1.18.2-40.1.25'
    implementation 'net.minecraftforge:fmlloader:1.18.2-40.1.80'
    implementation 'net.minecraftforge:fmlcore:1.18.2-40.1.80'
    implementation 'net.minecraftforge:forgespi:5.0.3'
    implementation "cpw.mods:modlauncher:10.0.1"
    implementation "cpw.mods:securejarhandler:1.0.5"
    implementation "commons-io:commons-io:2.11.0"
//    implementation "org.spongepowered:mixin:0.8.5"
    implementation "org.jetbrains:annotations:23.0.0"
    api "net.pillowmc:pillow-remapper:0.1-SNAPSHOT"
    api "net.fabricmc:sponge-mixin:0.11.4+mixin.0.8.5"
    api ("org.quiltmc:quilt-loader:0.18.1-beta.8") {
//        exclude module: "sponge-mixin"
        exclude group: "org.ow2.asm"
    }
    api "net.fabricmc:tiny-mappings-parser:0.3.0+build.17"
    api ("net.fabricmc:tiny-remapper:0.8.6") {
        exclude group: "org.ow2.asm"
    }
    api "net.fabricmc:access-widener:2.1.0"
    api "org.quiltmc:quilt-json5:1.0.1"
    api "org.quiltmc:quilt-config:1.0.0-beta.6"
//    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}
processResources {
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "version": project.version
    }
}
// mixin {
//     add sourceSets.main, 'mixins.pillow.refmap.json'
//     config 'net/pillowmc/pillow/asm/mc/mixins.pillow.mc.json'
//     debug.verbose = true
//     debug.export = true
// }

// Example for how to get properties into the manifest for reading at runtime.
jar {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
                "Specification-Title"     : "pillow",
                "Specification-Vendor"    : "heipiao",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "heipiao",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector": "net.pillowmc.pillow.asm.PillowConnector"
        ])
    }
    // from { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } }
}

task langproviderJar(type: Jar) {
    manifest {
        attributes([
                "Specification-Title"     : "pillow",
                "Specification-Vendor"    : "heipiao",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "heipiao",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLModType"              : "LANGPROVIDER",
                "Automatic-Module-Name"   : "pillowlp"
        ])
    }
    archiveClassifier = 'langprovider'
    from { sourceSets.langprovider.output }
}

// getTasks().findByName("build").dependsOn('langproviderSourcesJar')
sourcesJar {
    from sourceSets.langprovider.allSource
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
// jar.finalizedBy('reobfJar')
jar.finalizedBy('langproviderJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact langproviderJar
            artifact sourcesJar
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.api.allDependencies.each {
                    if (it.name == "sponge-mixin"){
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version+"_mxn")
                    }else if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/PillowMC/PillowMC")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
