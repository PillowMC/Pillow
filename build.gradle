// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'java-library'
	id 'org.quiltmc.gradle.licenser' version '2.0.1'
    id 'com.diffplug.spotless' version '6.22.0'
}


version = "0.2.0"
group = 'net.pillowmc' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'pillow'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

license {
    rule project.rootProject.file("LICENSE")
    include '**/*.java'
    exclude '**/io/github/steelwoolmc/**/*.java'
}

java {
    withSourcesJar()
}

sourceSets {
    langprovider{
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.main.output
    }
}

spotless {
  java {
    importOrder()
    endWithNewline()
    removeUnusedImports()
    cleanthat()
    eclipse()
    formatAnnotations()
  }
}

repositories {
    mavenLocal()
    maven {
        name = 'FabricMC'
        url = 'https://maven.fabricmc.net/'
    }
    maven {
        name = 'QuiltMC Release'
        url = 'https://maven.quiltmc.org/repository/release/'
    }
    maven {
        name = 'QuiltMC Snapshot'
        url = 'https://maven.quiltmc.org/repository/snapshot/'
    }
    maven {
        url "https://maven.neoforged.net/releases"
    }
    maven {
        url "https://libraries.minecraft.net/"
    }
    // maven {
    //     name = "GitHubPackages"
    //     url = uri("https://maven.pkg.github.com/PillowMC/PillowMC")
    //     credentials {
    //         username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
    //         password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
    //     }
    // }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    implementation "com.nothome:javaxdelta:2.0.1"
    implementation "com.github.jponge:lzma-java:1.3"
    implementation "net.neoforged.fancymodloader:loader:2.0.7"
    implementation "net.neoforged.fancymodloader:core:2.0.7"
    implementation "cpw.mods:modlauncher:10.0.9"
    runtimeOnly "cpw.mods:bootstraplauncher:1.1.2"
    implementation "cpw.mods:securejarhandler:2.1.24"
    implementation "commons-io:commons-io:2.13.0"
    implementation "org.jetbrains:annotations:24.1.0"
    api "net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5"
    api ("org.quiltmc:quilt-loader:0.23.1") {
//        exclude module: "sponge-mixin"
        exclude group: "org.ow2.asm"
    }
    api "net.fabricmc:tiny-mappings-parser:0.3.0+build.17"
    api ("net.fabricmc:tiny-remapper:0.8.6") {
        exclude group: "org.ow2.asm"
    }
    api "net.fabricmc:access-widener:2.1.0"
    api "org.quiltmc:quilt-json5:1.0.4+final"
    api "org.quiltmc:quilt-config:1.1.0-beta.3"
    compileOnly "org.quiltmc.chasm:chasm:0.1.0-20230126.045734-27"
    compileOnly "org.quiltmc.chasm:chassembly:0.1.0-20230126.045734-27"
}
processResources {
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "version": project.version
    }
}
// mixin {
//     add sourceSets.main, 'mixins.pillow.refmap.json'
//     config 'net/pillowmc/pillow/asm/mc/mixins.pillow.mc.json'
//     debug.verbose = true
//     debug.export = true
// }

// Example for how to get properties into the manifest for reading at runtime.
jar {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
                "Specification-Title"     : "pillow",
                "Specification-Vendor"    : "pillowmc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "pillowmc",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector": "net.pillowmc.pillow.asm.PillowConnector"
        ])
    }
    // from { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } }
}

task langproviderJar(type: Jar) {
    manifest {
        attributes([
                "Specification-Title"     : "pillow",
                "Specification-Vendor"    : "pillowmc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "pillowmc",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLModType"              : "LANGPROVIDER",
                "Automatic-Module-Name"   : "pillowlp"
        ])
    }
    archiveClassifier = 'langprovider'
    from { sourceSets.langprovider.output }
}

// getTasks().findByName("build").dependsOn('langproviderSourcesJar')
sourcesJar {
    from sourceSets.langprovider.allSource
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
// jar.finalizedBy('reobfJar')
jar.finalizedBy('langproviderJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact langproviderJar
            artifact sourcesJar
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.api.allDependencies.each {
                    if (it.name == "sponge-mixin"){
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version+"_mxn")
                    }else if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/PillowMC/pillow")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
