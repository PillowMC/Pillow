plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'java-library'
	id 'org.quiltmc.gradle.licenser' version '2.0.1'
    id 'com.diffplug.spotless' version '6.22.0'
}


version = "0.2.7"
group = 'net.pillowmc' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'pillow'

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

license {
    rule project.rootProject.file("LICENSE")
    include '**/*.java'
}

java {
    withSourcesJar()
}

spotless {
  java {
    importOrder()
    endWithNewline()
    removeUnusedImports()
    cleanthat()
    eclipse()
    formatAnnotations()
  }
}

repositories {
    mavenLocal()
    maven {
        name = 'FabricMC'
        url = 'https://maven.fabricmc.net/'
    }
    maven {
        name = 'QuiltMC Release'
        url = 'https://maven.quiltmc.org/repository/release/'
    }
    maven {
        name = 'QuiltMC Snapshot'
        url = 'https://maven.quiltmc.org/repository/snapshot/'
    }
    maven {
        url "https://maven.neoforged.net/releases"
    }
    maven {
        url "https://libraries.minecraft.net/"
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    implementation "net.neoforged.fancymodloader:loader:3.0.15"
    implementation "cpw.mods:modlauncher:10.0.10"
    implementation "cpw.mods:securejarhandler:2.1.31"
    implementation "org.jetbrains:annotations:24.1.0"
    api "net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5"
    api ("org.quiltmc:quilt-loader:0.25.0") {
        exclude group: "org.ow2.asm"
    }
    api "net.fabricmc:tiny-mappings-parser:0.3.0+build.17"
    api ("net.fabricmc:tiny-remapper:0.10.1") {
        exclude group: "org.ow2.asm"
    }
}
processResources {
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "version": project.version
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
                "Specification-Title"     : "pillow",
                "Specification-Vendor"    : "pillowmc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "pillowmc",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector": "net.pillowmc.pillow.asm.PillowConnector"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
// jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
    repositories {
        mavenLocal()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/PillowMC/pillow")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
